from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from config import Config
from db import mark_as_paid, postpone_reminder
from keyboards.main import build_paid_button, build_user_confirm_button
from db import mark_as_paid_custom, mark_as_unpaid
from datetime import datetime

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    if query.data == "pay":
        await query.edit_message_text(
            text=(
                "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n"
                "–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n"
                "–°—Ä–æ–∫: 12/25\n"
                "–ò–º—è: –ë–∞–±–∏—Ö–∏–Ω –ê—Ä—Ç—ë–º –ê–Ω–¥—Ä–µ–µ–≤–∏—á\n\n"
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            ),
            reply_markup=build_paid_button()
        )

    elif query.data == "paid":
        mark_as_paid(user_id)
        await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —É–≤–µ–¥–æ–º–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await context.bot.send_message(
            chat_id=Config.ADMIN_CHAT_ID,
            text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ.",
            reply_markup=build_user_confirm_button(user_id)
        )

    elif query.data == "remind_later":
        postpone_reminder(user_id)
        await query.edit_message_text("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≤—Ç—Ä–∞.")

    elif query.data.startswith("admin_confirm:"):
        if query.from_user.id != Config.ADMIN_CHAT_ID:
            await query.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", show_alert=True)
            return
        confirmed_user_id = int(query.data.split(":")[1])
        mark_as_paid_custom(
            confirmed_user_id,
            datetime.now().date().isoformat(),
            admin_id=query.from_user.id
        )

        # –ü–æ–ª—É—á–∏–º –∏–º—è + username —á–µ—Ä–µ–∑ API
        try:
            user = await context.bot.get_chat(confirmed_user_id)
            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"
            full = f"{username} ({name})"
        except:
            full = f"ID {confirmed_user_id}"
        await query.edit_message_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

    elif query.data.startswith("admin_cancel:"):
        if query.from_user.id != Config.ADMIN_CHAT_ID:
            await query.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
            return

        user_id = int(query.data.split(":")[1])
        mark_as_unpaid(user_id, admin_id=query.from_user.id)

        try:
            user = await context.bot.get_chat(user_id)
            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"
            full = f"{username} ({name})"
        except:
            full = f"ID {user_id}"

        await query.edit_message_text(f"‚Ü© –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        await context.bot.send_message(
            chat_id=Config.ADMIN_CHAT_ID,
            text=f"‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é: {full}\nüîÑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ'"
        )
    elif query.data.startswith("admin_view:"):
        view = query.data.split(":")[1]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–æ–ø–∫—É –≤ –≤—ã–∑–æ–≤ history —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        args = []
        if view == "paid":
            args = ["only=paid"]
        elif view == "not_paid":
            args = ["only=not_paid"]
        elif view == "latest":
            args = ["only=paid", "sort=latest"]

        update = Update.de_json(update.to_dict(), context.bot)
        context.args = args

        from handlers.admin import history
        await history(update, context)

    elif query.data == "admin_stats":
        from db import get_all_users
        users = get_all_users()

        total = len(users)
        paid = len([u for u in users if u[2] == "paid"])
        not_paid = total - paid

        percent = round((paid / total) * 100, 1) if total > 0 else 0

        latest_user = None
        latest_date = ""
        for u in sorted(users, key=lambda x: x[3] or "", reverse=True):
            if u[2] == "paid" and u[3]:
                latest_user = u
                latest_date = u[3]
                break

        if latest_user:
            try:
                user_chat = await context.bot.get_chat(latest_user[0])
                name = user_chat.first_name or latest_user[1]
                username = f"@{user_chat.username}" if user_chat.username else ""
                latest_info = f"{latest_date} ({name} {username})"
            except:
                latest_info = f"{latest_date} (ID {latest_user[0]})"
        else:
            latest_info = "‚Äî"

        await query.message.reply_text(
            text=(
                f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
                f"‚úÖ –û–ø–ª–∞—Ç–∏–ª–∏: <b>{paid}</b>\n"
                f"‚ùå –ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏: <b>{not_paid}</b>\n"
                f"üí≥ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–ª–∞—Ç: <b>{percent}%</b>\n"
                f"üÜï –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞: <b>{latest_info}</b>"
            ),
            parse_mode="HTML"
        )


    elif query.data == "admin_export_csv":
        from db import get_all_users
        import csv
        users = get_all_users()
        file_path = "users_export.csv"
        with open(file_path, mode="w", newline="", encoding="utf-8-sig") as f:  # <-- –≤–æ—Ç –∫–ª—é—á
            writer = csv.writer(f)
            writer.writerow(["id", "name", "payment_status", "payment_date", "previous_payment_date", "next_reminder_date"])
            for row in users:
                writer.writerow(row)
        with open(file_path, "rb") as f:
            await query.message.reply_document(document=f, filename="users_export.csv",
                                               caption="üì• –≠–∫—Å–ø–æ—Ä—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –≥–æ—Ç–æ–≤!")

    elif query.data.startswith("user_log:"):
        user_id = int(query.data.split(":")[1])

        from db import get_user_payment_log
        logs = get_user_payment_log(user_id)

        if not logs:
            await query.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", show_alert=True)
            return

        text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        for log in logs:
            date_logged, action, old_date, new_date, by_admin = log

            if action == "confirmed":
                text += f"üü¢ {date_logged[:10]} ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ (–Ω–æ–≤–∞—è: {new_date})\n"
            elif action == "cancelled":
                text += f"üî¥ {date_logged[:10]} ‚Äî –æ—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã (—Å—Ç–∞—Ä–∞—è: {old_date})\n"
            else:
                text += f"‚öôÔ∏è {date_logged[:10]} ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ: {action}\n"

        await query.answer()  # –∑–∞–∫—Ä—ã—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞..."
        await query.message.reply_text(text)



    elif query.data == "come_back":

        await query.edit_message_text("‚ù§Ô∏è –ú—ã –≤–∞—Å –æ—á–µ–Ω—å –∂–¥—ë–º! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!")

        # ‚¨á –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—é–¥–∞

        try:

            user = query.from_user

            name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

            username = f"@{user.username}" if user.username else "(–±–µ–∑ username)"

            full = f"{name} {username}"

            user_id = user.id

            await context.bot.send_message(

                chat_id=Config.ADMIN_CHAT_ID,

                text=(

                    f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{full}</b> –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É \"–Ø –≤–µ—Ä–Ω—É—Å—å\".\n"

                    f"üÜî ID: <code>{user_id}</code>"

                ),

                parse_mode="HTML"

            )

        except Exception as e:

            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")


def get_button_handler():
    return CallbackQueryHandler(handle_button)
