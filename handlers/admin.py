from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from db import get_unpaid_users
from keyboards.main import build_user_confirm_button
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from config import Config
from utils.storage import save_invite_message_id
from db import get_all_users
from utils.storage import load_invite_message_id
from keyboards.main import build_history_keyboard
from keyboards.main import build_admin_panel

async def invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    bot_link = f"https://t.me/{context.bot.username}"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ü§ñ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞", url=bot_link)]
    ])

    msg = await context.bot.send_message(
        chat_id=Config.CHANNEL_ID,
        text=(
            "üèä‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è!\n"
            "–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É ‚Äî –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ üì©\n\n"
            "–û–Ω –±—É–¥–µ—Ç –º—è–≥–∫–æ –∏ –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± –æ–ø–ª–∞—Ç–µ üí≥"
        ),
        reply_markup=keyboard
    )

    save_invite_message_id(msg.message_id)

    await update.message.reply_text("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")

async def pin_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    msg_id = load_invite_message_id()
    if not msg_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /invite.")
        return

    await context.bot.pin_chat_message(chat_id=Config.CHANNEL_ID, message_id=msg_id)
    await update.message.reply_text("üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("üì© –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –¢–ï–ö–°–¢_–°–û–û–ë–©–ï–ù–ò–Ø")
        return

    message = " ".join(context.args)
    users = get_all_users()
    count = 0

    for user in users:
        user_id = user[0]
        try:
            await context.bot.send_message(chat_id=user_id, text=message)
            count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {user_id}: {e}")

    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

async def list_unpaid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    users = get_unpaid_users()
    if not users:
        await update.message.reply_text("üéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø–ª–∞—Ç–∏–ª–∏.")
        return

    for user_id, name in users:
        await update.message.reply_text(
            text=f"üë§ {name} (ID: {user_id})",
            reply_markup=build_user_confirm_button(user_id)
        )

from utils.scheduler import send_reminders  # –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

from db import get_unpaid_users

from db import get_all_users
from keyboards.main import build_user_cancel_button

async def list_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    users = get_all_users()
    paid_users = [u for u in users if u[2] == "paid"]

    if not paid_users:
        await update.message.reply_text("‚ùó –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    for user in paid_users:
        user_id, name, status, payment_date, previous_payment_date, next_reminder_date = user
        try:
            user_chat = await context.bot.get_chat(user_id)
            username = f"@{user_chat.username}" if user_chat.username else "(–±–µ–∑ username)"
        except:
            username = "(–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

        await update.message.reply_text(
            text=f"üë§ {name} {username}\nüìÖ –û–ø–ª–∞—Ç–∞: {payment_date}",
            reply_markup=build_user_cancel_button(user_id)
        )

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        message = update.message or update.callback_query.message
        await message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    query = " ".join(context.args).lower() if context.args else ""

    users = get_all_users()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if query:
        filters = query.split()
        search_term = None
        status_filter = None
        sort_latest = False

        for f in filters:
            if f.startswith("only="):
                status_filter = f.split("=")[1]
            elif f.startswith("sort=") and f.split("=")[1] == "latest":
                sort_latest = True
            else:
                search_term = f

        if search_term:
            users = [
                u for u in users if search_term in (u[1].lower() + " " + str(u[0]))
            ]

        if status_filter:
            users = [u for u in users if u[2] == status_filter]

        if sort_latest:
            users.sort(key=lambda x: x[3] or "", reverse=True)  # –ø–æ –¥–∞—Ç–µ –æ–ø–ª–∞—Ç—ã
    else:
        users.sort(key=lambda x: x[1])  # –ø–æ –∏–º–µ–Ω–∏

    message = update.message or update.callback_query.message

    if not users:
        await message.reply_text("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for user in users:
        user_id, name, status, payment_date, previous_payment_date, next_reminder_date = user

        try:
            tg_user = await context.bot.get_chat(user_id)
            username = f"@{tg_user.username}" if tg_user.username else "(–±–µ–∑ username)"
        except:
            username = "(–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

        status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if status == "paid" else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        date_text = f"üìÖ –û–ø–ª–∞—Ç–∞: {payment_date}" if payment_date else "üìÖ –û–ø–ª–∞—Ç–∞: ‚Äî"

        await message.reply_text(
            text=(
                f"üë§ {name} {username}\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"{date_text}\n"
                f"üí≥ –°—Ç–∞—Ç—É—Å: {status_text}"
            ),
            parse_mode="HTML",
            reply_markup=build_history_keyboard(user_id, status)
        )


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await update.message.reply_text("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=build_admin_panel())

from db import get_user_payment_log

async def user_log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != Config.ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log <user_id>")
        return

    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    logs = get_user_payment_log(user_id)

    if not logs:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞.")
        return

    text = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
    for log in logs:
        date_logged, action, old_date, new_date, by_admin = log

        if action == "confirmed":
            text += f"üü¢ {date_logged[:10]} ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ (–Ω–æ–≤–∞—è: {new_date})\n"
        elif action == "cancelled":
            text += f"üî¥ {date_logged[:10]} ‚Äî –æ—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã (—Å—Ç–∞—Ä–∞—è: {old_date})\n"
        else:
            text += f"‚öôÔ∏è {date_logged[:10]} ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ: {action}\n"

    await update.message.reply_text(text)


def get_admin_handlers():
    return [
        CommandHandler("list_unpaid", list_unpaid),
        CommandHandler("invite", invite),
        CommandHandler("pin_invite", pin_invite),
        CommandHandler("broadcast", broadcast),
        CommandHandler("list_paid", list_paid),
        CommandHandler("history", history),
        CommandHandler("admin", admin_panel),
        CommandHandler("log", user_log),
    ]